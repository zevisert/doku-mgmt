apiVersion: v1
kind: Namespace
metadata:
  name: "cert-manager"
  labels:
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v1.1.0
---
# Source: cert-manager/templates/cainjector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager-cainjector
  namespace: "cert-manager"
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
---
# Source: cert-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager
  namespace: "cert-manager"
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
---
# Source: cert-manager/templates/webhook-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager-webhook
  namespace: "cert-manager"
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
---
# Source: cert-manager/templates/cainjector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["certificates"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["secrets"]
  apiGroups: [""]
  verbs: ["get", "list", "watch"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["get", "create", "update", "patch"]
- resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
  apiGroups: ["admissionregistration.k8s.io"]
  verbs: ["get", "list", "watch", "update"]
- resources: ["apiservices"]
  apiGroups: ["apiregistration.k8s.io"]
  verbs: ["get", "list", "watch", "update"]
- resources: ["customresourcedefinitions"]
  apiGroups: ["apiextensions.k8s.io"]
  verbs: ["get", "list", "watch", "update"]
- resources: ["auditsinks"]
  apiGroups: ["auditregistration.k8s.io"]
  verbs: ["get", "list", "watch", "update"]
---
# Source: cert-manager/templates/rbac.yaml
# Issuer controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["issuers", "issuers/status"]
  apiGroups: ["cert-manager.io"]
  verbs: ["update"]
- resources: ["issuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["secrets"]
  apiGroups: [""]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["create", "patch"]
---
# Source: cert-manager/templates/rbac.yaml
# ClusterIssuer controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["clusterissuers", "clusterissuers/status"]
  apiGroups: ["cert-manager.io"]
  verbs: ["update"]
- resources: ["clusterissuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["secrets"]
  apiGroups: [""]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["create", "patch"]
---
# Source: cert-manager/templates/rbac.yaml
# Certificates controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
  apiGroups: ["cert-manager.io"]
  verbs: ["update"]
- resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["certificates/finalizers", "certificaterequests/finalizers"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  apiGroups: ["cert-manager.io"]
  verbs: ["update"]
- resources: ["orders"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["create", "delete", "get", "list", "watch"]
- resources: ["secrets"]
  apiGroups: [""]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["create", "patch"]
---
# Source: cert-manager/templates/rbac.yaml
# Orders controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["orders", "orders/status"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["update"]
- resources: ["orders", "challenges"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["clusterissuers", "issuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["challenges"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["create", "delete"]
- resources: ["orders/finalizers"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["update"]
- resources: ["secrets"]
  apiGroups: [""]
  verbs: ["get", "list", "watch"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["create", "patch"]
---
# Source: cert-manager/templates/rbac.yaml
# Challenges controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["challenges", "challenges/status"]
  # Use to update challenge resource status
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["update"]
- resources: ["challenges"]
  # Used to watch challenge resources
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["issuers", "clusterissuers"]
  # Used to watch challenges, issuer and clusterissuer resources
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["secrets"]
  # Need to be able to retrieve ACME account private key to complete challenges
  apiGroups: [""]
  verbs: ["get", "list", "watch"]
- resources: ["events"]
  # Used to create events
  apiGroups: [""]
  verbs: ["create", "patch"]
- resources: ["pods", "services"]
  # HTTP01 rules
  apiGroups: [""]
  verbs: ["get", "list", "watch", "create", "delete"]
- resources: ["ingresses"]
  apiGroups: ["extensions"]
  verbs: ["get", "list", "watch", "create", "delete", "update"]
- resources: ["routes/custom-host"]
  # We require the ability to specify a custom hostname when we are creating
  # new ingress resources.
  # See: https://github.com/openshift/origin/blob/21f191775636f9acadb44fa42beeb4f75b255532/pkg/route/apiserver/admission/ingress_admission.go#L84-L148
  apiGroups: ["route.openshift.io"]
  verbs: ["create"]
- resources: ["challenges/finalizers"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["update"]
- resources: ["secrets"]
  # DNS01 rules (duplicated above)
  apiGroups: [""]
  verbs: ["get", "list", "watch"]
---
# Source: cert-manager/templates/rbac.yaml
# ingress-shim controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["certificates", "certificaterequests"]
  apiGroups: ["cert-manager.io"]
  verbs: ["create", "update", "delete"]
- resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["ingresses"]
  apiGroups: ["extensions"]
  verbs: ["get", "list", "watch"]
- resources: ["ingresses/finalizers"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  apiGroups: ["extensions"]
  verbs: ["update"]
- resources: ["events"]
  apiGroups: [""]
  verbs: ["create", "patch"]
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-view
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- resources: ["certificates", "certificaterequests", "issuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["get", "list", "watch"]
- resources: ["challenges", "orders"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["get", "list", "watch"]
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager-edit
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
- resources: ["certificates", "certificaterequests", "issuers"]
  apiGroups: ["cert-manager.io"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
- resources: ["challenges", "orders"]
  apiGroups: ["acme.cert-manager.io"]
  verbs: ["get", "list", "watch"]
---
# Source: cert-manager/templates/cainjector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-cainjector
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager-cainjector
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-issuers
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-clusterissuers
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-certificates
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-orders
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-challenges
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-controller-ingress-shim
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: "cert-manager"
  kind: ServiceAccount
---
# Source: cert-manager/templates/cainjector-rbac.yaml
# leader election rules
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["configmaps"]
  # Used for leader election by the controller
  # cert-manager-cainjector-leader-election is used by the CertificateBased injector controller
  #   see cmd/cainjector/start.go#L113
  # cert-manager-cainjector-leader-election-core is used by the SecretBased injector controller
  #   see cmd/cainjector/start.go#L137
  apiGroups: [""]
  resourceNames: ["cert-manager-cainjector-leader-election", "cert-manager-cainjector-leader-election-core"]
  verbs: ["get", "update", "patch"]
- resources: ["configmaps"]
  apiGroups: [""]
  verbs: ["create"]
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["configmaps"]
  # Used for leader election by the controller
  apiGroups: [""]
  resourceNames: ["cert-manager-controller"]
  verbs: ["get", "update", "patch"]
- resources: ["configmaps"]
  apiGroups: [""]
  verbs: ["create"]
---
# Source: cert-manager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cert-manager-webhook:dynamic-serving
  namespace: "cert-manager"
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
rules:
- resources: ["secrets"]
  apiGroups: [""]
  resourceNames:
  - 'cert-manager-webhook-ca'
  verbs: ["get", "list", "watch", "update"]
- resources: ["secrets"]
  # It's not possible to grant CREATE permission on a single resourceName.
  apiGroups: [""]
  verbs: ["create"]
---
# Source: cert-manager/templates/cainjector-rbac.yaml
# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-cainjector:leaderelection
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager-cainjector
  namespace: cert-manager
  kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager:leaderelection
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager
  namespace: cert-manager
  kind: ServiceAccount
  apiGroup: ""
---
# Source: cert-manager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-manager-webhook:dynamic-serving
  namespace: "cert-manager"
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
roleRef:
  name: cert-manager-webhook:dynamic-serving
  kind: Role
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: cert-manager-webhook
  namespace: cert-manager
  kind: ServiceAccount
  apiGroup: ""
---
# Source: cert-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cert-manager
  namespace: "cert-manager"
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/name: cert-manager
  ports:
  - protocol: TCP
    port: 9402
    targetPort: 9402
---
# Source: cert-manager/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cert-manager-webhook
  namespace: "cert-manager"
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/name: webhook
  ports:
  - name: https
    port: 443
    targetPort: 10250
---
# Source: cert-manager/templates/cainjector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager-cainjector
  namespace: "cert-manager"
  labels:
    app: cainjector
    app.kubernetes.io/component: "cainjector"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cainjector
    helm.sh/chart: cert-manager-v1.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: "cainjector"
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
  template:
    metadata:
      labels:
        app: cainjector
        app.kubernetes.io/component: "cainjector"
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cainjector
        helm.sh/chart: cert-manager-v1.1.0
    spec:
      serviceAccountName: cert-manager-cainjector
      containers:
      - name: cert-manager
        image: "quay.io/jetstack/cert-manager-cainjector:v1.1.0"
        args:
        - --v=2
        - --leader-election-namespace=kube-system
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources: {}
        imagePullPolicy: IfNotPresent
---
# Source: cert-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager
  namespace: "cert-manager"
  labels:
    app: cert-manager
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    helm.sh/chart: cert-manager-v1.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: "controller"
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
  template:
    metadata:
      labels:
        app: cert-manager
        app.kubernetes.io/component: "controller"
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        helm.sh/chart: cert-manager-v1.1.0
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/port: '9402'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: cert-manager
      containers:
      - name: cert-manager
        image: "quay.io/jetstack/cert-manager-controller:v1.1.0"
        args:
        - --v=2
        - --cluster-resource-namespace=$(POD_NAMESPACE)
        - --leader-election-namespace=kube-system
        ports:
        - protocol: TCP
          containerPort: 9402
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources: {}
        imagePullPolicy: IfNotPresent
---
# Source: cert-manager/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager-webhook
  namespace: "cert-manager"
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: "webhook"
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
  template:
    metadata:
      labels:
        app: webhook
        app.kubernetes.io/component: "webhook"
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: webhook
        helm.sh/chart: cert-manager-v1.1.0
    spec:
      serviceAccountName: cert-manager-webhook
      containers:
      - name: cert-manager
        image: "quay.io/jetstack/cert-manager-webhook:v1.1.0"
        args:
        - --v=2
        - --secure-port=10250
        - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
        - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
        - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
        ports:
        - name: https
          containerPort: 10250
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources: {}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            port: 6080
            path: /livez
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            port: 6080
            path: /healthz
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        imagePullPolicy: IfNotPresent
---
# Source: cert-manager/templates/webhook-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "cert-manager/cert-manager-webhook-ca"
webhooks:
- name: webhook.cert-manager.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: cert-manager-webhook
      namespace: "cert-manager"
      path: /mutate
  failurePolicy: Fail
  rules:
  - resources:
    - "*/*"
    apiGroups:
    - "cert-manager.io"
    - "acme.cert-manager.io"
    apiVersions:
    - "*"
    operations:
    - CREATE
    - UPDATE
  # Only include 'sideEffects' field in Kubernetes 1.12+
  sideEffects: None
  timeoutSeconds: 10
---
# Source: cert-manager/templates/webhook-validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: webhook
    helm.sh/chart: cert-manager-v1.1.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "cert-manager/cert-manager-webhook-ca"
webhooks:
- name: webhook.cert-manager.io
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: cert-manager-webhook
      namespace: "cert-manager"
      path: /validate
  failurePolicy: Fail
  namespaceSelector:
    matchExpressions:
    - key: "cert-manager.io/disable-validation"
      operator: "NotIn"
      values:
      - "true"
    - key: "name"
      operator: "NotIn"
      values:
      - cert-manager
  rules:
  - resources:
    - "*/*"
    apiGroups:
    - "cert-manager.io"
    - "acme.cert-manager.io"
    apiVersions:
    - "*"
    operations:
    - CREATE
    - UPDATE
  # Only include 'sideEffects' field in Kubernetes 1.12+
  sideEffects: None
  timeoutSeconds: 10
